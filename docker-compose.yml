version: '3.7'

services:

  traefik:
    image: "traefik:v2.10"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - '--api=true'
      - '--api.insecure=true'
      - '--api.dashboard=true'
      - "--accesslog=true"
      - "--accesslog.filePath=/logs/access.log"
      - "--accesslog.bufferingsize=1000"
      - "--accesslog.format=json"
      - "--accesslog.filters.statuscodes=200,300-302,400-404,500-501-502-503-504-505"
      - "--accesslog.filters.retryattempts"
      - "--accesslog.filters.minduration=10ms"
      - "--providers.docker=true"
      - '--providers.docker.endpoint=unix:///var/run/docker.sock'
      - "--providers.docker.exposedbydefault=false"
      - '--providers.docker.network=app-network'
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entryPoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      #- "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web-secure"
      #- "--certificatesresolvers.myresolver.acme.tlschallenge.resolvers=ns101.cloudns.net,ns102.cloudns.net,ns103.cloudns.net,ns104.cloudns.net,pns101.cloudns.net,pns102.cloudns.net,pns103.cloudns.net,pns104.cloudns.net"
      #- "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
      - "--certificatesresolvers.myresolver.acme.email=eg.ahmad@me.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    environment:
      - "CLOUDNS_AUTH_ID=5233"
      - "CLOUDNS_AUTH_PASSWORD=!SadButTrue1542"
      - "CLOUDNS_PROPAGATION_TIMEOUT=600"
      - "CLOUDNS_HTTP_TIMEOUT=600"
      #- "TZ=US/Alaska"
    labels:
      - "traefik.enable=false"
      #- "traefik.http.routers.api.rule=Host(`traefik.YOURDOMAIN.COM`)"
      #- "traefik.http.routers.dashboard.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      #- "traefik.http.routers.dashboard.entrypoints=websecure"
      #- "traefik.http.routers.dashboard.service=api@internal"
      #- 'traefik.http.routers.traefik.rule=(Host(`server.afdal.me`))' # Put in your domain
      #- 'traefik.http.routers.traefik.entrypoints=web,websecure'
      #- 'traefik.http.routers.traefik.tls.certresolver=myresolver'
      #- 'traefik.http.routers.traefik.service=api@internal'
      #- 'traefik.http.services.api@internal.loadbalancer.server.port=8080' # Required in swarms, https://doc.traefik.io/traefik/v2.0/routing/providers/docker/#services
      #- 'traefik.http.routers.traefik.middlewares=traefik-auth'
      #- 'traefik.http.middlewares.traefik-auth.basicauth.users=user:$$apr1$$q8eZFHjF$$Fvmkk//V6Btlaf2i/ju5n/' # username: user, password: password
      #https://server.afdal.me/
    volumes:
      - ~/volumes/traefik/letsencrypt:/letsencrypt
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - ~/volumes/traefik/logs/:/logs/
    networks:
      - "elk"

  # The 'setup' service runs a one-off script which initializes users inside
  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the
  # values of the passwords defined in the '.env' file. It also creates the
  # roles required by some of these users.
  #
  # This task only needs to be performed once, during the *initial* startup of
  # the stack. Any subsequent run will reset the passwords of existing users to
  # the values defined inside the '.env' file, and the built-in roles to their
  # default permissions.
  #
  # By default, it is excluded from the services started by 'docker compose up'
  # due to the non-default profile it belongs to. To run it, either provide the
  # '--profile=setup' CLI flag to Compose commands, or "up" the service by name
  # such as 'docker compose up setup'.
  setup:
    profiles:
      - setup
    build:
      context: setup/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    init: true
    volumes:
      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z
      - ./setup/lib.sh:/lib.sh:ro,Z
      - ./setup/roles:/roles:ro,Z
    environment:
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}
      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}
      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}
      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}
      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z
      - elasticsearch:/usr/share/elasticsearch/data:Z
    ports:
      - 9200:9200
      - 9300:9300
    environment:
      node.name: elasticsearch
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node

      #My security settings
      #xpack.security.enabled: true
      #xpack.security.transport.ssl.enabled: true
      #xpack.security.transport.ssl.key: certs/instance/instance.key
      #xpack.security.transport.ssl.key_passphrase: mypassphrase
      #xpack.security.transport.ssl.certificate: certs/instance/instance.crt
      #xpack.security.transport.ssl.certificate_authorities: "certs/ca.crt" 
      #xpack.security.http.ssl.enabled: true
      #xpack.security.http.ssl.key: certs/instance/instance.key
      #xpack.security.http.ssl.key_passphrase: mypassphrase
      #xpack.security.http.ssl.certificate: certs/instance/instance.crt
      #xpack.security.http.ssl.certificate_authorities: "certs/ca.crt" 
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.elastic.rule=Host(`${ELASTIC_DOMAIN}`)"
      - "traefik.http.routers.elastic.entrypoints=web,websecure"
      - "traefik.http.routers.elastic.tls.certresolver=myresolver"
    networks:
      - elk
    restart: unless-stopped

  logstash:
    build:
      context: logstash/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - 5044:5044
      - 50000:50000/tcp
      - 50000:50000/udp
      - 9600:9600
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    restart: unless-stopped

  kibana:
    build:
      context: kibana/
      args:
        ELASTIC_VERSION: ${ELASTIC_VERSION}
    volumes:
      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - 5601:5601
    environment:
      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}
    networks:
      - elk
    depends_on:
      - elasticsearch
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kibana.rule=Host(`${KIBANA_DOMAIN}`)"
      - "traefik.http.routers.kibana.entrypoints=web,websecure"
      - "traefik.http.routers.kibana.tls.certresolver=myresolver"
    restart: unless-stopped

networks:
  elk:
    driver: bridge

volumes:
  elasticsearch:
